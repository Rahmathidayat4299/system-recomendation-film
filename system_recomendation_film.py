# -*- coding: utf-8 -*-
"""System Recomendation Film.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hwQjtiViPTS4in2KZ3vnQDbBHy745wNC

# Import Library
mengimport library yang dibutuhkan untuk project ini
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

"""# Crawling Data
*Proses Pengambilan data dari sumber repository github
"""

# Langkah 1: Tentukan URL GitHub untuk tiap genre
urls = [
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Action.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Adventure.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Animation.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Comedy.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Crime.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Drama.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Fantasy.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Horror.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Mystery.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Music.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Romance.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Sci-Fi.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/Thriller.csv',
    'https://raw.githubusercontent.com/Rahmathidayat4299/dataset-movie-recomendation/master/War.csv'
]

# Langkah 2: Muat semua dataset dan gabungkan menjadi satu
dataframes = [pd.read_csv(url) for url in urls]
datafilm = pd.concat(dataframes, ignore_index=True)

# Langkah 3: Cek hasil gabungan
print(datafilm.head())

# Simpan dataset gabungan ke file CSV
datafilm.to_csv('datafilm.csv', index=False)

"""# Data UnderStanding
Data diambil dari repository github public dan sesuai untuk kasus system rekomendasi
"""

import pandas as pd
data_film = "/content/datafilm.csv"
data_film = pd.read_csv(data_film)
data_film.drop_duplicates()
data_film.head()

data_film.info()

"""#DATA PREPARATION
##Cek Dataset
* Jumlah data
*Nilai data yang null atau Nann
*jumlah data yang duplikat atau ganda<br>
Proses pengecekan dilakukan untuk mempermudah mengetahui kondisi data
"""

print(f"Jumlah data: {len(data_film)}")
# print(f"Jumlah data null: {data_film.isnull().sum()}")
# print(f"Jumlah data duplicated : {data_film.duplicated().sum()}")
# data_film = data_film.duplicated().drop_duplicates()
print(f"Jumlah data duplicated : {data_film.duplicated().sum()}")
print(f"Jumlah data null: {data_film.isnull().sum()}")
data_film_cleaned = data_film.drop_duplicates()
print(f"Jumlah data duplicated : {data_film_cleaned.duplicated().sum()}")
print(f"{data_film_cleaned.info()}")

"""# Univariate Exploratory Data Analysis
Pada tahap ini,  melakukan analisis dan eksplorasi setiap variabel pada data. Jika dibutuhkan eksplorasi lebih lanjut mengenai keterkaitan antara satu variabel dengan variabel lainnya.
"""

# Fungsi untuk analisis data
def exploratory_data_analysis(df):
    # Memeriksa informasi dataset
    print("Informasi Dataset:")
    df.info()

    # Statistik Deskriptif
    print("\nStatistik Deskriptif Numerik:")
    print(df.describe())

    print("\nStatistik Deskriptif Kategorikal:")
    print(df.describe(include='object'))

    # Visualisasi distribusi numerik
    numerical_columns = ['rating', 'num_raters', 'num_reviews']
    for col in numerical_columns:
        plt.figure(figsize=(8, 4))
        sns.histplot(df[col], kde=True, bins=30)
        plt.title(f'Distribusi {col}')
        plt.xlabel(col)
        plt.ylabel('Frekuensi')
        plt.show()

    # Visualisasi variabel kategorikal
    categorical_columns = ['movie_rated', 'genres']
    for col in categorical_columns:
        plt.figure(figsize=(10, 5))
        sns.countplot(y=df[col], order=df[col].value_counts().index)
        plt.title(f'Distribusi {col}')
        plt.xlabel('Frekuensi')
        plt.ylabel(col)
        plt.show()

    # Boxplot untuk melihat distribusi dan outliers
    for col in numerical_columns:
        plt.figure(figsize=(8, 4))
        sns.boxplot(data=df, x=col)
        plt.title(f'Boxplot {col}')
        plt.xlabel(col)
        plt.show()

    # Korelasi antar variabel numerik
    plt.figure(figsize=(8, 6))
    sns.heatmap(df[numerical_columns].corr(), annot=True, cmap='coolwarm', linewidths=0.5)
    plt.title('Korelasi Antar Variabel Numerik')
    plt.show()

# Panggil fungsi
exploratory_data_analysis(data_film_cleaned)

"""# Data preprocessing
Data preprocessing adalah tahap krusial sebelum memulai analisis dan pemodelan. Dengan melakukan penggabungan file dan memastikan data dalam keadaan bersih, Anda akan lebih siap untuk analisis lanjutan dan model yang lebih baik. Pastikan untuk menyesuaikan langkah-langkah ini dengan dataset dan kebutuhan spesifik Anda.
"""

# 3. Menghapus outlier menggunakan metode IQR
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    # Menentukan batas bawah dan atas
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    # Menghapus outlier
    df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
    return df

# Menentukan kolom numerik yang akan dianalisis untuk outlier
numerical_columns = ['rating', 'num_raters', 'num_reviews']

# Menghapus outlier untuk setiap kolom numerik
for col in numerical_columns:
    data_film_cleaned = remove_outliers(data_film_cleaned, col)

# Menampilkan data setelah penghapusan outlier
print("\nData setelah penghapusan outlier:")
print(data_film_cleaned.describe())

data_film_cleaned.head()

"""# Data Preparation
* Mengatasi Missing Values: Baris dengan nilai yang hilang dihapus dari DataFrame menggunakan dropna().<br>
* Menyamakan Jenis Masakan (Genre): Kolom Movie_Genre dimodifikasi untuk hanya menyimpan genre pertama jika terdapat lebih dari satu genre.<br>
* Encoding: Fitur Movie_Genre diubah menjadi format numerik menggunakan OneHotEncoder.<br>
* Normalisasi: Fitur numerik dinormalisasi untuk menghindari perbedaan skala yang mempengaruhi model.
"""

# 1. Mengatasi Missing Values
# Menghapus baris dengan missing values
data_film_cleaned = data_film.dropna()

# 2. Menyamakan Genre Film
# Jika 'genres' berisi daftar genre, ambil genre pertama
data_film_cleaned['genres'] = data_film_cleaned['genres'].apply(lambda x: x.split(',')[0] if isinstance(x, str) else x)

# 3. Encoding untuk variabel kategorikal (genres)
encoder = OneHotEncoder(sparse_output=False)
genres_encoded = encoder.fit_transform(data_film_cleaned[['genres']])

# Mengonversi hasil encoding menjadi DataFrame
genres_encoded_df = pd.DataFrame(genres_encoded, columns=encoder.get_feature_names_out(['genres']))
data_film_encoded = pd.concat([data_film_cleaned.reset_index(drop=True), genres_encoded_df.reset_index(drop=True)], axis=1)

# 4. Normalisasi untuk fitur numerik
scaler = StandardScaler()
numerical_columns = ['rating', 'num_raters', 'num_reviews']
data_film_encoded[numerical_columns] = scaler.fit_transform(data_film_encoded[numerical_columns])
# 1. Memastikan DataFrame bersih dan siap
# (Anda sudah melakukannya sebelumnya)

# 2. Membangun Representasi Fitur
# Gabungkan genres dan rating menjadi satu string
data_film_encoded['combined_features'] = (
    data_film_encoded['genres'] + ' ' +
    data_film_encoded['rating'].astype(str)
)

# 3. Menggunakan TF-IDF Vectorizer untuk membangun representasi fitur
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(data_film_encoded['combined_features'])



# Tampilkan data setelah persiapan
print(data_film_encoded.head())

"""# Model dengan Content based filtering
Membangun sistem rekomendasi film berbasis konten yang menggunakan informasi dari deskripsi film (genre, name, dan review_url) untuk merekomendasikan film yang mirip dengan film yang dipilih.
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
# 4. Menghitung Cosine Similarity
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
# 5. Membuat Fungsi Rekomendasi
def get_recommendations(movie_title, cosine_sim=cosine_sim):
    # Mengambil indeks film berdasarkan judulnya
    idx = data_film_encoded[data_film_encoded['name'] == movie_title].index[0]

    # Mengambil skor kesamaan untuk film yang dituju
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Mengurutkan film berdasarkan skor kesamaan
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Mengambil 10 film teratas
    sim_scores = sim_scores[1:11]  # Menghindari film itu sendiri

    # Mengambil indeks film
    movie_indices = [i[0] for i in sim_scores]

    # Mengembalikan DataFrame film yang direkomendasikan
    return data_film_encoded.iloc[movie_indices][['name', 'genres', 'rating']]

# 6. Menggunakan Fungsi Rekomendasi
recommended_movies = get_recommendations('V for Vendetta')  # Ganti dengan judul film yang ingin direkomendasikan
print(recommended_movies)

"""#Metrik Precision
## Untuk model content-based filtering kamu dapat menggunakan metrik precision sebagai evaluation.
"""

# 5.1. Define function to calculate precision for recommendations
def calculate_precision(recommended_movies, relevant_movies):
    # Determine the number of relevant movies in the recommendations
    relevant_recommendations = recommended_movies[recommended_movies['name'].isin(relevant_movies)]

    # Calculate precision
    precision = len(relevant_recommendations) / len(recommended_movies)

    return precision

# 6. Menggunakan Fungsi Rekomendasi dan Precision
recommended_movies = get_recommendations('V for Vendetta')  # Ganti dengan judul film yang ingin direkomendasikan

# Daftar film relevan yang diharapkan (misalnya yang relevan berdasarkan rating atau preferensi pengguna)
relevant_movies = ['The Matrix', 'Inception', 'The Dark Knight']  # Ganti dengan daftar film yang relevan

# Menghitung precision
precision = calculate_precision(recommended_movies, relevant_movies)

# Menampilkan film yang direkomendasikan dan precision
print(recommended_movies)
print(f'Precision: {precision:.2f}')